[{"body":"Example Configuration [service] network=Aruba logfile=nsalog.log nrmfile=ports.nrm peers=http://host.example.org:9080/NSI/discovery.xml https://nsi.example.com/NSI/discovery.xml policies=requiretrace,requireuser serviceid_start=1900000 # Database database=opennsa dbuser=dbuser dbpassword=dbpassword dbhost=127.0.0.1 [dud] option1=123 option2=abc Service block These are the options for the service block:\nnetwork : The network name managed by OpenNSA. Mandatory.\nlogfile : File to log to. Default: /var/log/opennsa.log\nnrmmap : Path to port/topology NRM description file\npeers : URLs to NSAs to peer with control-plane wise. Separate multiple entries with newline (only peers= on the first line). If using multiple lines, the following peer urls must be in indented at least pass the = on the first line (parser limitation). Optional. No peers will put OpenNSA into UPA mode.\npolicies : What policies are required. Currently requiretrace, requireuser, and aggregator are the possible options. These require a connection trace, a user security attribute, and allow proxy aggregation respectively. Optional.\nserviceid_start : Initial service id to set in the database. Requires a plugin to use. Optional.\ndatabase : Name of the PostgreSQL database to connect to. Mandatory.\ndbuser : Username to use when connecting to database. Mandatory.\ndbpassword : Password to use when connecting to database. Mandatory.\ndbhost : Host to connect to for database. Optional. If not specified, OpenNSA will connect to PostgreSQL over the unix domain socket OpenNSA does not require anything big from the database, so using a different host/vm is almost surely a waste of resources. It is however useful when running a PostgreSQL in docker.\nBackend A backend is configured by a section describing the type of backend, e.g. dud (for testing) or junosmx. The configuration options in the section are specific to the backend. Reading the setup code in backend, is the easiest way to see the options.\nCustom Backend If you have written your own backend that is specific to an organization or project, you can use the custombackend option:\n[custombackend] module=mycustombackend op1=123 op2=abc This will import the Python module named mycustombackend and pass along the configuration options. You will probably need to specify PYTHONPATH to include the path of the module.\nIt is strongly recommended that you keep the module out of the OpenNSA module such that you can upgrade OpenNSA without having to re-deploy your backend.\nNRM Configuration Configuration the nrm file is typically the most confusing parts of setting up OpenNSA. In short the NRM file defines the ports available through the NSI protocol, as OpenNSA does not make everything available. An NRM is line based and typically looks like this:\n# type name remote label bandwith interface attributes ethernet ps - vlan:1780-1799,2000 1000 em0 user=johndoe@example.org ethernet bon bonaire.net:topology#arb(-in|-out) vlan:1780-1799 1000 em3 restricttransit ethernet cur curacao.net:topology#arb(-in|-out) vlan:1780-1799 1000 em3 restricttransit,hostdn=curacao.example.net Each line describes an STP (NSI term). An STP is more or less the same as a port. Note that two STPs can point to the same underlying interface / port, which can occasionally be useful (you will probably know if this happens). OpenNSA does reservations on the interface resources internally, to ensure that resource do not get double booked.\nNRM Configuration options type : The port type. Only ethernet is recognized at the moment. Bidirectional is implied.\nname : The name of the STP. The STP address will be a URN with the network and name in it.\n Remote : The network and port the port is connected to. Format: network#port(-inprefix|-outprefix) Use ‘-’ if not connected to any network (termination inside the network).\nlabel : STP configuration options. Currently vlan and mpls are supported. Note that not all backend support those. Can specify single values and ranges. Comma separated. Use ‘-’ if no labels are to be used (i.e., ethernet trunk).\nbandwidth : The available bandwidth on the port (or the bandwidth that is available to OpenNSA on the port).\ninterface : The interface / port on the network device.\nattributes : A list of comma separated attributes that describes security attributes or policies for the port. Security attributes always have the form key=value, otherwise it is a policy. Despite the name, security attributes are not very secure.\n The hostdn will match against the hostname of a certificate. For this to work OpenNSA must be configured to run with TLS (see docs/tls-guide). The only supported policy at the moment is `restricttransit`. If two ports both have the `restricttransit` attribute, connecions between the two will not be allowed.  ","categories":["Guide"],"description":"A short primer on the opennsa config\n","excerpt":"A short primer on the opennsa config\n","ref":"/opennsa/docs/usage-guide/opennsa/config/","tags":["docs","guide","userguide"],"title":"Configuration Guide"},{"body":"Brocade Config snippet:\n[brocade] host=206.196.xx.xx user=admin fingerprint=63:3f:f5:68:e5:15:a1:6d:b0:61:40:2b:22:83:xx:xx publickey=/home/opennsa/.ssh/id_rsa.pub privatekey=/home/opennsa/.ssh/id_rsa Getting SSH keys in order:\nssh-keygen generates the rsa/dsa key with a ID and a user in the public key, for example:\n---- BEGIN SSH2 PUBLIC KEY ---- key-dsa (... key ...) jab@home but Brocade doesn’t understand the key with the index (key-dsa) and the user (jab@home) on it so I had to remove them to make it work.\n","categories":["Developer"],"description":"Backends Documentation\n","excerpt":"Backends Documentation\n","ref":"/opennsa/docs/developer/backends/brocade/","tags":["developer","docs","guide","backends"],"title":"Brocade"},{"body":"CLI User Guide\n","categories":["Guide"],"description":"CLI User Guide\n","excerpt":"CLI User Guide\n","ref":"/opennsa/docs/usage-guide/cli/","tags":["docs","guide","userguide"],"title":"CLI User Guide"},{"body":"This is a collection of developer guides and instruction that are tailored to the developer experience though might be helpful to the casual user.\n","categories":["Developer"],"description":"Developer Documentation\n","excerpt":"Developer Documentation\n","ref":"/opennsa/docs/developer/","tags":["developer","docs","guide"],"title":"Developer"},{"body":"OpenNSA Server User Guide\n","categories":["Guide"],"description":"OpenNSA Server User Guide\n","excerpt":"OpenNSA Server User Guide\n","ref":"/opennsa/docs/usage-guide/opennsa/","tags":["docs","guide","userguide"],"title":"OpenNSA Server User Guide"},{"body":"The configuration of TLS/SSL of OpenNSA is something that has confused several people. This guide tries to make it more comprehensible. OpenNSA is somewhat barebones in its configuration style, but uses standard X.509 certificates and directory layouts. Prodding at TLS/SSL config until it works is usually a bad strategy. Understand it, and it should be straightforward.\nFirst you need to get a certificate. Please don’t make a self-signed. Get one from a real certificate authority. Many NRENs can get certificates from TERENA or similar. These typically have guides as well and there is no purpose in repeating it here.\nOpenNSA or its author cannot magically produce a certificate you (sorry).\nWhen you have obtained a certificate you should have a private key and a certificate file (also contains the public key).\nConfiguration Options tls=true Enable TLS.\nkey=/etc/hostcert/nsi.nordu.net.key Path to private key.\ncertificate=/etc/hostcert/nsi.nordu.net.pem Path to the certificate.\ncertdir=/etc/ssl/certs Directory for certificates authorities. OpenNSA uses the OpenSSL standard of seperate CA files ending with .0 Only files ending with .0 are loaded.\nverify=true If OpenNSA should verify the peer. You want this to true, unless debugging..\nallowedhosts=host1.example.org,host2.example.org Comma-seperated list of hosts that are allowed to make request to OpenNSA.\nCommon Issues If you get: AttributeError: ‘OpenSSL.SSL.Context’ object has no attribute ‘set_session_cache_mode’\nUpgrade pyOpenSSL to at least version 0.14 (as listed in the INSTALL file).\n","categories":["Developer"],"description":"TLS/SSL Configuration Guide\n","excerpt":"TLS/SSL Configuration Guide\n","ref":"/opennsa/docs/usage-guide/opennsa/tls-guide/","tags":["developer","docs","guide","backends"],"title":"TLS/SSL Configuration Guide"},{"body":"This is a collection of guides related to using the OpenNSA tool\n","categories":["Guide"],"description":"User Guide: This section focuses more on using OpenNSA, rather then the intricacies of developing, expending on it and developing new features for it.\n","excerpt":"User Guide: This section focuses more on using OpenNSA, rather then the intricacies of developing, expending on it and developing new features for it.\n","ref":"/opennsa/docs/usage-guide/","tags":["docs","guide","userguide"],"title":"User Guide"},{"body":"url is an http url with the path /api/running/services, i.e.,\nhttp://NCSHOST:8080/api/running/services\nthe interface part should be of the format “router:interface”\n","categories":["Developer"],"description":"NCS\n","excerpt":"NCS\n","ref":"/opennsa/docs/usage-guide/opennsa/ncs/","tags":["developer","docs","guide","backends"],"title":"NCS"},{"body":"A short primer on the onsa command line tool.\nDisclaimer: There are still bugs and unfinished functionality.\nIntro\nThe onsa command line tools allows the creation of connections and basic lifecycle management, along with query functionality.\nIf you cannot wait to get started, you can list the command options with:\n$ onsa --help  The command line tool requires a command (e.g., reserve or provision), and a set of options, in order to carry out a command.\nDefaults file\nOften there will be a number of options, which will be the same or almost the same with every invocation, e.g., location of topology files, WSDL directory, identity of the client and so forth. To save time, the CLI will read on default options from a file, typically ~/.opennsa-cli, but it is possible to specify an alternate location using the -f (–defaults-file) option.\nHere is an example of a .opennsa-cli defaults file:\nbandwidth=200 host=localhost port=7080 starttime=+20 endtime=+260 nsa=aruba,aruba.net:2013:nsa,http://localhost:4080/NSI/services/CS2 The host and port options, will be used in setting up the callback URL. They will default to the value provided by “socket.getfqdn()” and 7080.\nThe starttime and endtime can be set to xsd datetime value, but can also be assigned a +X value, with X being the number of seconds into the future. This makes it easy to always get some usefull values when testing.\nThe nsa entry, allow a shorthand for specifying nsa id and service url. With the above example, one can use “-p aruba” instead “-p aruba.net:2013:nsa -u http://localhost:4080/NSI/services/CS2” This makes the command line tool a lot nicer to use. There can be multiple nsa shorthand entries.\nIf an option is specified both on the command line and in the defaults file, the command line value will be used.\nIt is possible to set all options which can be set on the command line in the defaults file, with the exception of the command to perform.\nUsing the tool\nWith a default options file created, a connection can be created like this:\n$ ./onsa reserve --source northernlight.ets:ps --dest northernlight.ets:ams -p northernlight.ets  A connection id and global id is assigned automatically but can also be assigned using the -c and -g options.\nTo provision the connection:\n./onsa provision -p northernlight.ets -c \u003cconnection-id\u003e  Similarly with release and terminate, querysummary, and querydetails.\nSTP Syntax\nSTP without VLAN (full port - rarely used)\nnorthernlight.ets:ps\nSTP with VLAN 23, this is the typical one to use.\nnorthernlight.ets:ps?vlan=23\nThere is also MPLS (you should know what you are doing wrt. labels)\nnorthernlight.ets:ps?mpls=123:456\n","categories":["Guide"],"description":"A short primer on the onsa command line tool.\n","excerpt":"A short primer on the onsa command line tool.\n","ref":"/opennsa/docs/usage-guide/cli/onsa_cli/","tags":["docs","guide","userguide"],"title":"User Guide"},{"body":"OpenNSA rest interface The rest interface is an easy to use alternative interface to the NSI SOAP api.\nURL design List connections (filter) GET /connections Create new connection POST /connections Get connection information GET /connections/{connection_id} Get connection status (stream) GET /connections/{connection_id}/status Change status POST /connections/{connection_id}/status The /status GET is a stream that updates continuously (server won’t close connection and will emit new status each time it updates).\nEnabling rest In [service] section add rest=true\nUsage Create a connection Example minimal json payload to create connection:\n{ \"source\" : \"nordu.net:topology:s1\", \"destination\" : \"surfnet.nl:topology:ps\", } Additional fields:\n start_time in iso8601 format end_time in iso8601 format capacity - bandwidth (megabits) auto_commit - Used to enable auto commit of reservation request. Defaults true. auto_provision - Used to auto provision the link after the reservation is done. Default false.  Date format is ISO8601, e.g., “2015-12-13T08:08:08Z”\nCreate a connection using curl:\ncurl -i -X POST -d '{\"source\": \"TestNetwork:topology:port1?vlan=1781\", \"destination\": \"TestNetwork:topology:port2?vlan=1782\"}' http://localhost:9080/connections You will get a location header back that contains the connection id.\nProvision a reserved connection curl -X POST -d \"PROVISION\" http://localhost:9080/connections/TE-03b16eea46/status It will return an ACK, and start working on provisioning the link. The link will be up and ready to use when the provision_state is Provisioned and data_plane_active is true.\nTerminating a connection curl -X POST -d \"TERMINATE\" http://localhost:9080/connections/TE-03b16eea46/status The connection will then go into lifecycle_state Terminating, and when everything is released it will end up in lifecycle_state Terminated.\nOther supported status operations  COMMIT confirms the reserve commit (used if you set auto_commit to false). ABORT aborts the reservation. RELEASE used to release a provisioned connection, and return to it just being reserved. PROVISION described above TERMINATE described above  Other features No:\n nsa identity (b0rked concept anyway) global reservation id Possibility to designate connection id Time zones in datetime, always utc (end with Z)  Todo Maybe:\n client correlation id  ","categories":["Developer"],"description":"REST Interface guide\n","excerpt":"REST Interface guide\n","ref":"/opennsa/docs/usage-guide/opennsa/rest-interface/","tags":["developer","docs","guide","backends"],"title":"REST Interface"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/docs/","tags":"","title":"Documentation"},{"body":"Further document the various backends available.\n","categories":["Developer"],"description":"Backends Documentation\n","excerpt":"Backends Documentation\n","ref":"/opennsa/docs/developer/backends/","tags":["developer","docs","guide","backends"],"title":"Backends"},{"body":"This is a collection of legacy documents that are likely no longer needed but kept for posterity’s sake.\n","categories":["Legacy","Placeholders"],"description":"Legacy Documentation\n","excerpt":"Legacy Documentation\n","ref":"/opennsa/docs/legacydocs/","tags":["legacy","docs"],"title":"Legacy Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/categories/developer/","tags":"","title":"Developer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/developer/","tags":"","title":"developer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/install/","tags":"","title":"install"},{"body":"Quick Developer Guide Server Setup For this guide we are assuming you are using the configuration templates and examples provided by default. Any commands will likely need to be updated accordingly for your own topology and configuration.\nWe’ll assume that you are either running the server locally. Both of those cases will require a running postgres database. For simplicity sake I’m going to assume you have a docker-compose stack running.\n./generate-docker-config ## will create a .env file and config/opennsa.conf docker-compose up -d Usage Guide All operations in this case will be triggered via the client titled onsa which can be found in the root of the project.\nThere are a few ‘base’ operation that are supported by the Network Service Interface (NSI) Spec which you can find here. Others that are not listed in the document serve as a convenience method.\nAll operation are usually a sequence of: reserve, reserveCommit, provision, release, terminate. query related requests are for diagnostic purposes.\nEndpoints The following endpoints will then be accessible if everything works as advertised.\n http://localhost:9080/NSI/dockertest.net:2021:topology.nml.xml http://localhost:9080/NSI/discovery.xml  Step 0 NSI Domain knowledge Assumptions:  TLS is not enabled. running locally and exposed 9080 locally. hostname is set to dockertest.net:2021 or similar value in the format of:  {domain_name}:year In our example and sample file we use dockertest.net:2021\nURN All resources are mapped using a URN pattern.\nhttp://localhost:9080/NSI/dockertest.net:2021:topology.nml.xml will show you your current topology.\nResources are reference by URN which are in the following format:\n\u003cprefix\u003e:\u003corganization\u003e:\u003ctype\u003e example value is: urn:ogf:network:dockertest.net:2021:topology:ps#vlan=1780\n prefix: should be urn:ogf:network organization: \u003cdomain_name\u003e:year type: in our example would topology resource: #\u003clabel={vlan or mpls}\u003e=\u003cID aka 1780\u003e  More info can be found in the config documentation.\nSelecting Source / Destination Reservation: Step 1 NOTES: Currently the -s and -d strip away the prefix. Please be aware when using the CLI client.\nonsa reserve \\  -u http://localhost:9080/NSI/services/CS2 \\  ##service from Docker  -g urn:uuid:d7a6a2ff-2cb5-4892-8bec-2a50140a6342 \\ ##Global ID -s \"dockertest.net:2021:topology:ps#vlan=1780\" \\  ## Source -d \"dockertest.net:2021:topology:port1#vlan=1787\" \\  ## Destination -b 100 \\  # bandwidth in Megabits -a 2022-09-24T20:00:00 \\  #start date/time (has to be in the future) -e 2022-09-24T21:00:00 \\  ## end date/time (again in the future) -p dockertest.net:2021:nsa \\  ## provider -r dockertest.net:2021:sense \\ ##requested  -h 192.168.1.64 \\  ## OpenNSA Server host (localhost won't work if using docker) -o 8543 \\  #Port  -v \\  ## verbose -q ##dump payload message Query Validation We’re going to query the data for the reservation we just created.\n./onsa query \\  -u http://localhost:9080/NSI/services/CS2 \\  -p \"dockertest.net:2021:nsa\" \\  -r \"dockertest.net:2021:sense\" \\  -h 192.168.1.64 -o 8543 \\  -q Output:\nConnection DO-8108e03315 (urn:ogf:network:dockertest.net:2021:nsa) Global ID urn:uuid:d7a6a2ff-2cb5-4892-8bec-2a50140a6342 Description Test Connection States ReserveStart, Released, Created Dataplane Active : False, Version: 0, Consistent False Start-End 2022-09-24 20:00:00 - 2022-09-24 21:00:00 Path dockertest.net:2021:topology:ps?vlan=1780 -- dockertest.net:2021:topology:port1?vlan=1787 Bandwidth 100 Direction Bidirectionall Provision Step 2 We’ll need the Connection ID from the query above for this step.\n./onsa provision \\  -c DO-8108e03315 \\  ## Connection  -u http://localhost:9080/NSI/services/CS2 \\  -p \"dockertest.net:2021:nsa\" \\  -r \"dockertest.net:2021:sense\" \\  -h 192.168.1.64 -o 8543 \\  -v -q Same Query as above should now show a new state of:\nStates **ReserveHeld**, Provisioning, Created Clean up Operations Release Step 3 ./onsa release \\  -c DO-8108e03315 \\  -u http://localhost:9080/NSI/services/CS2 \\  -p \"dockertest.net:2021:nsa\" \\  -r \"dockertest.net:2021:sense\" \\  -h 192.168.1.64 -o 8543 \\  -v -q Terminate Step 4 ./onsa terminate \\  -c DO-8108e03315 \\  -u http://localhost:9080/NSI/services/CS2 \\  -p \"dockertest.net:2021:nsa\" \\  -r \"dockertest.net:2021:sense\" \\  -h localhost -o 8543 \\  -v -q ","categories":["Developer"],"description":"Quick Developer Guide\n","excerpt":"Quick Developer Guide\n","ref":"/opennsa/docs/developer/developer_guide/","tags":["install","developer"],"title":"Quick Developer Guide"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/","tags":"","title":"Tags"},{"body":"How to run the the unit/integration tests for OpenNSA\nMake sure all the requirements are installed. Then:\n./util/pg-test-run # This will start a Postgres in docker PYTHONPATH=. trial test Running the CI/CD pipeline locally:\n  Install the CLI tooling according to: https://docs.drone.io/quickstart/cli/\n  Run the pipeline by using drone exec. Please ensure you have docker installed.\n  ","categories":["Developer"],"description":"Quick Developer Guide\n","excerpt":"Quick Developer Guide\n","ref":"/opennsa/docs/developer/test/","tags":["install","developer"],"title":"Testing"},{"body":"OpenNSA 3 Configuration Migration With the port of OpenNSA from Python 2 to Python 3, and the subsequent release of OpenNSA 3, support for multiple backends was added. For this, some changes in the configuration format was needed.\nThe changes are:\n Use domain instead of network in [service] block Each backend must specify a network name in its block NRM Map must now be specified per backend  Example of old style:\n[service] network=aruba.net nrmmap=aruba.nrm [dud] Equivalent config in new style:\n[service] domain=aruba.net [dud:topology] nrmmap=aruba.nrm An example with multiple backends shows why the change was needed:\n[service] domain=aruba.net [dud:topology1] nrmmap=aruba-topo1.nrm [dud:topology1] nrmmap=aruba-topo2.nrm Feel free to call your networks something better than topology, but use ‘topology’ if you want to keep the old STP names.\n","categories":["Legacy"],"description":"Configuration Migration and py 2.x to 3.x changes\n","excerpt":"Configuration Migration and py 2.x to 3.x changes\n","ref":"/opennsa/docs/legacydocs/migration/","tags":["install"],"title":"Configuration Migration"},{"body":"Installing OpenNSA on CentOS 6.4   Upgrade the CentOS 6.4:\nyum update\n  Install PostgreSQL Server and its development dependencies:\nyum install postgresql-server.x86_64 postgresql-plpython.x86_64 postgresql-devel.x86_64\n  Install Python 2.7 (CentOS depends of Python2.6 for its package system)\n  yum groupinstall \"Development tools\" yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel cd /usr/local/src wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 tar xf Python-2.7.3.tar.bz2 cd Python-2.7.3 ./configure --prefix=/usr/local make \u0026\u0026 make altinstall The Python2.7 interpreter is at /usr/local/bin/python2.7\nInstall the Python Distribute  wget --no-check-certificate http://pypi.python.org/packages/source/d/distribute/distribute-0.6.35.tar.gz tar xf distribute-0.6.35.tar.gz cd distribute-0.6.35 python2.7 setup.py install This generates the script /usr/local/bin/easy_install-2.7 that you use to install packages for Python 2.7. It puts your packages in /usr/local/lib/python2.7/site-packages/\n (Removed, to lazy to do renumbering)\n  Install Twisted\n  wget --no-check-certificate https://pypi.python.org/packages/source/T/Twisted/Twisted-13.1.0.tar.bz2#md5=5609c91ed465f5a7da48d30a0e7b6960 easy_install-2.7 Twisted-13.1.0.tar.bz2 Install Twistar-1.2  wget --no-check-certificate https://pypi.python.org/packages/source/t/twistar/twistar-1.2.tar.gz#md5=4f63af14339b1f2d9556395b527ea7a4 easy_install-2.7 twistar-1.2.tar.gz Install psycopg  wget http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.1.tar.gz easy_install-2.7 psycopg2-2.5.1.tar.gz Install pycrypto-2.6 and pyasn1-0.1.7 (only necessary when using SSH backends)  wget --no-check-certificate https://pypi.python.org/packages/source/p/pycrypto/pycrypto-2.6.tar.gz easy_install-2.7 pycrypto-2.6.tar.gz wget --no-check-certificate https://pypi.python.org/packages/source/p/pyasn1/pyasn1-0.1.7.tar.gz#md5=2cbd80fcd4c7b1c82180d3d76fee18c8 easy_install-2.7 pyasn1-0.1.7.tar.gz Initialize and Start the PostgreSQL  service postgresql initdb service postgresql start ln -s /etc/init.d/postgresql /etc/rc3.d/S99postgresql ln -s /etc/init.d/postgresql /etc/rc3.d/K99postgresql Prepare the environment for Opennsa  useradd opennsa su - opennsa Install OpenNSA  git clone git://git.nordu.net/opennsa.git cd opennsa git checkout nsi2 python2.7 setup.py build su python2.7 setup.py install Create the database  cp datafiles/schema.sql /tmp/ su - postgres createdb opennsa createuser -RSD opennsa exit su - opennsa psql opennsa opennsa=# \\i /tmp/schema.sql exit \u003cCTRL+D\u003e exit It’s important to keep the server time accurate (NTP)  yum install ntp.x86_64 ln -s /etc/init.d/ntpd /etc/rc3.d/S99ntpd ln -s /etc/init.d/ntpd /etc/rc3.d/K99ntpd /etc/init.d/ntpd start Generate your SSH keys  su - opennsa ssh-keygen Press  3 times. The keys id_dsa and id_dsa.pub will be created under ~opennsa/.ssh/\nThey key needs to have this format for Twisted recognizes it:\nssh-rsa pub-key(3 or more lines) user@server.ampath.net\n Edit these two configuration files accordingly to your environment (under /home/opennsa/opennsa):\nvi opennsa.conf\n  [service] network=\u003cYOUR_NETWORK_NAME\u003e logfile= nrmmap=opennsa.nrm host=\u003cSERVER_FQDN\u003e database=opennsa dbuser=opennsa dbpassword=\u003cYOUR_PASS\u003e tls=false # vi opennsa.nrm (your topology) # type name remote labels bandwith interface # # Assuming that my IXP is IXP_A, follow an example: # # AMPATH \u003c-- 2/2 IXP_A 2/1 --\u003e NORDUNET # # bi-ethernet nordunet nordunet#IXP_A-(in|out) vlan:1779-1787 1000 2/1 # bi-ethernet ampath ampath#IXP_A-(in|out) vlan:1779-1787 1000 2/2 # # type name remote labels bandwith interface bi-ethernet \u003cREMOTE_1\u003e \u003cREMOTE_1\u003e#\u003cYOUR_NETWORK\u003e-(in|out) vlan:1779-1787 1000 \u003cDEVICE_PORT_1\u003e bi-ethernet \u003cREMOTE_2\u003e \u003cREMOTE_2\u003e#\u003cYOUR_NETWORK\u003e-(in|out) vlan:1779-1787 1000 \u003cDEVICE_PORT_2\u003e bi-ethernet \u003cREMOTE_3\u003e \u003cREMOTE_3\u003e#\u003cYOUR_NETWORK\u003e-(in|out) vlan:1779-1787 1000 \u003cDEVICE_PORT_3\u003e Create a .opennsa-cli file under ~opennsa/  echo -e \"bandwidth=200\\nhost=localhost\\nport=7080\\nstarttime=+1\\nendtime=+20\" \u003e ~opennsa/.opennsa-cli The starttime and the endtime represent when the circuit will start and end in seconds\nConfigure your backend in the opennsa.conf  # OpenNSA has support for the following backends: brocade, dell, etc... # So create a section for your backend with the following format: # [backend_type] host=x.x.x.x user=opennsa fingerprint=xx:xx:xx:xx:xx:xx:xx... publickey=/home/opennsa/.ssh/id_rsa.pub privatekey=/home/opennsa/.ssh/id_rsa # if your backend is Brocade, an example: # [brocade] host=x.x.x.x user=opennsa fingerprint=xx:xx:xx:xx:xx:xx:xx.... publickey=/home/opennsa/.ssh/id_rsa.pub privatekey=/home/opennsa/.ssh/id_rsa enablepassword=XXXXX Start the OpenNSA:  su - opennsa cd opennsa twistd -ny opennsa.tac (-n to not create a daemon. There is also an init.d script) You should see:\n2013-07-02 14:17:08-0400 [-] Log opened. 2013-07-02 14:17:08-0400 [-] twistd 13.1.0 (/usr/local/bin/python2.7 2.7.3) starting up. 2013-07-02 14:17:08-0400 [-] reactor class: twisted.internet.epollreactor.EPollReactor. 2013-07-02 14:17:08-0400 [-] OpenNSA service initializing 2013-07-02 14:17:08-0400 [-] Provider URL: http://\u003cSERVER_FQDN\u003e:9080/NSI/services/CS2 2013-07-02 14:17:08-0400 [-] Topology URL: http://\u003cSERVER_FQDN\u003e:9080/NSI/topology/\u003cYOUR_NETWORK\u003e.xml 2013-07-02 14:17:08-0400 [-] Site starting on 9080 2013-07-02 14:17:08-0400 [-] Starting factory \u003ctwisted.web.server.Siteinstance at 0x1df39e0\u003e 2013-07-02 14:17:08-0400 [-] OpenNSA service started Configure your network device to support authentication using SSH keys  In general, you have to copy your public key (id_dsa.pub) to the network device and insert this key in the valid users key chain. Check your device’s documentation to confirm how to make this\nconfiguration.\nAs an example, in Brocade MLX switches you have to:\na. cd ~opennsa/.ssh b. echo \"---- BEGIN SSH2 PUBLIC KEY ----\" \u003e keys.txt c. cat id_dsa.pub \u003e\u003e keys.txt d. echo \"---- END SSH2 PUBLIC KEY ----\" \u003e\u003e keys.txt e. Remove the encryption algorithm (ssh-rsa): sed -i 's/ssh-rsa //'keys.txt d. Remove the user (opennsa@\u003cSERVER_FQDN\u003e): sed -i 's/opennsa@\u003cSERVER_FQDN\u003e//' keys.txt f. Upload the keys.txt to your TFTP server g. Log into your Brocade device and: g1. SSH@Brocade# configure terminal g2. SSH@Brocade(config)# ip ssh pub-key-file tftp \u003cTFTP_SERVER\u003e keys.txt g3. SSH@Brocade(config)# ip ssh key-authentication yes g4. SSH@Brocade(config)# end g5. SSH@Brocade# write memory Now you are ready to run OpenNSA  Use the document docs/usage for understand how to use it (under development).\nReferences:\n https://github.com/NORDUnet/opennsa/blob/nsi2/INSTALL http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/  ","categories":["Legacy"],"description":"Installation instruction for OpenNSA on CentOS 6.4\n","excerpt":"Installation instruction for OpenNSA on CentOS 6.4\n","ref":"/opennsa/docs/legacydocs/centos-guide/","tags":["install"],"title":"Install on CentOS 6.4"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/categories/legacy/","tags":"","title":"Legacy"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/backends/","tags":"","title":"backends"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/docs/","tags":"","title":"docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/categories/guide/","tags":"","title":"Guide"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/guide/","tags":"","title":"guide"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/legacy/","tags":"","title":"legacy"},{"body":"  #td-cover-block-0 { background-image: url(/opennsa/featured-background_hu7765caee4a369b4814552d760d1d0c42_809731_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/opennsa/featured-background_hu7765caee4a369b4814552d760d1d0c42_809731_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to OpenNSA: an implementation of the Network Service Interface (NSI). Documentation   Download   Spec            OpenNSA is currently in a state of heavy development, and many features are only partially implemented.\nOpenNSA features: Plugable backends,DUD backend for easy testing, Easy creation of NML topology, command line tool for basic operations, path finding to do multi-domain circuit creation\n   ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/opennsa/featured-background_hu7765caee4a369b4814552d760d1d0c42_809731_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/opennsa/featured-background_hu7765caee4a369b4814552d760d1d0c42_809731_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to OpenNSA: an implementation of the Network Service Interface (NSI). Documentation   Download   Spec            OpenNSA is currently in a state of heavy development, and many features are only partially implemented.\nOpenNSA features: Plugable backends,DUD backend for easy testing, Easy creation of NML topology, command line tool for basic operations, path finding to do multi-domain circuit creation\n   ","ref":"/opennsa/","tags":"","title":"OpenNSA"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/categories/placeholders/","tags":"","title":"Placeholders"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/opennsa/tags/userguide/","tags":"","title":"userguide"}]