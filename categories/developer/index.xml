<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenNSA â€“ Developer</title>
    <link>https://NORDUnet.github.io/opennsa/categories/developer/</link>
    <description>Recent content in Developer on OpenNSA</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Dec 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://NORDUnet.github.io/opennsa/categories/developer/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Brocade</title>
      <link>https://NORDUnet.github.io/opennsa/docs/developer/backends/brocade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/developer/backends/brocade/</guid>
      <description>
        
        
        &lt;h1 id=&#34;brocade&#34;&gt;Brocade&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Config snippet:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[brocade]
host=206.196.xx.xx
user=admin
fingerprint=63:3f:f5:68:e5:15:a1:6d:b0:61:40:2b:22:83:xx:xx
publickey=/home/opennsa/.ssh/id_rsa.pub
privatekey=/home/opennsa/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Getting SSH keys in order:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ssh-keygen generates the rsa/dsa key with a ID and a user in the public
key, for example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---- BEGIN SSH2 PUBLIC KEY ----
key-dsa (... key ...) jab@home 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but Brocade doesn&amp;rsquo;t understand the key with the index (key-dsa) and the
user (jab@home) on it so I had to remove them to make it work.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Developer</title>
      <link>https://NORDUnet.github.io/opennsa/docs/developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/developer/</guid>
      <description>
        
        
        &lt;p&gt;This is a collection of developer guides and instruction that are tailored to the developer experience though might be helpful to the casual user.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TLS/SSL Configuration Guide</title>
      <link>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/tls-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/tls-guide/</guid>
      <description>
        
        
        &lt;p&gt;The configuration of TLS/SSL of OpenNSA is something that has confused several
people. This guide tries to make it more comprehensible. OpenNSA is somewhat
barebones in its configuration style, but uses standard X.509 certificates and
directory layouts. Prodding at TLS/SSL config until it works is usually a bad
strategy. Understand it, and it should be straightforward.&lt;/p&gt;
&lt;p&gt;First you need to get a certificate. Please don&amp;rsquo;t make a self-signed. Get one
from a real certificate authority. Many NRENs can get certificates from TERENA
or similar. These typically have guides as well and there is no purpose in
repeating it here.&lt;/p&gt;
&lt;p&gt;OpenNSA or its author cannot magically produce a certificate you (sorry).&lt;/p&gt;
&lt;p&gt;When you have obtained a certificate you should have a private key and a
certificate file (also contains the public key).&lt;/p&gt;
&lt;h2 id=&#34;configuration-options&#34;&gt;Configuration Options&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tls=true&lt;/code&gt;
Enable TLS.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key=/etc/hostcert/nsi.nordu.net.key&lt;/code&gt;
Path to private key.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;certificate=/etc/hostcert/nsi.nordu.net.pem&lt;/code&gt;
Path to the certificate.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;certdir=/etc/ssl/certs&lt;/code&gt;
Directory for certificates authorities. OpenNSA uses the OpenSSL standard of seperate CA files ending with .0
Only files ending with .0 are loaded.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;verify=true&lt;/code&gt;
If OpenNSA should verify the peer. You want this to true, unless debugging..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;allowedhosts=host1.example.org,host2.example.org&lt;/code&gt;
Comma-seperated list of hosts that are allowed to make request to OpenNSA.&lt;/p&gt;
&lt;h2 id=&#34;common-issues&#34;&gt;Common Issues&lt;/h2&gt;
&lt;p&gt;If you get:
AttributeError: &amp;lsquo;OpenSSL.SSL.Context&amp;rsquo; object has no attribute &amp;lsquo;set_session_cache_mode&amp;rsquo;&lt;/p&gt;
&lt;p&gt;Upgrade pyOpenSSL to at least version 0.14 (as listed in the INSTALL file).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: NCS</title>
      <link>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/ncs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/ncs/</guid>
      <description>
        
        
        &lt;p&gt;url is an http url with the path /api/running/services, i.e.,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://NCSHOST:8080/api/running/services&#34;&gt;http://NCSHOST:8080/api/running/services&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the interface part should be of the format &amp;ldquo;router:interface&amp;rdquo;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: REST Interface</title>
      <link>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/rest-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/usage-guide/opennsa/rest-interface/</guid>
      <description>
        
        
        &lt;h1 id=&#34;opennsa-rest-interface&#34;&gt;OpenNSA rest interface&lt;/h1&gt;
&lt;p&gt;The rest interface is an easy to use alternative interface to the NSI SOAP api.&lt;/p&gt;
&lt;h2 id=&#34;url-design&#34;&gt;URL design&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List connections (filter)       GET     /connections
Create new connection           POST    /connections
Get connection information      GET     /connections/{connection_id}
Get connection status (stream)  GET     /connections/{connection_id}/status
Change status                   POST    /connections/{connection_id}/status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The /status GET is a stream that updates continuously (server won&amp;rsquo;t close connection and will emit new status each time it updates).&lt;/p&gt;
&lt;h2 id=&#34;enabling-rest&#34;&gt;Enabling rest&lt;/h2&gt;
&lt;p&gt;In [service] section add &lt;code&gt;rest=true&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;h3 id=&#34;create-a-connection&#34;&gt;Create a connection&lt;/h3&gt;
&lt;p&gt;Example minimal json payload to create connection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;nordu.net:topology:s1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;surfnet.nl:topology:ps&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additional fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start_time&lt;/code&gt; in iso8601 format&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_time&lt;/code&gt; in iso8601 format&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capacity&lt;/code&gt; - bandwidth (megabits)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_commit&lt;/code&gt; - Used to enable auto commit of reservation request. Defaults &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_provision&lt;/code&gt; - Used to auto provision the link after the reservation is done. Default &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Date format is ISO8601, e.g., &amp;ldquo;2015-12-13T08:08:08Z&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Create a connection using curl:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -i -X POST -d &#39;{&amp;quot;source&amp;quot;: &amp;quot;TestNetwork:topology:port1?vlan=1781&amp;quot;, &amp;quot;destination&amp;quot;: &amp;quot;TestNetwork:topology:port2?vlan=1782&amp;quot;}&#39; http://localhost:9080/connections
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will get a location header back that contains the connection id.&lt;/p&gt;
&lt;h3 id=&#34;provision-a-reserved-connection&#34;&gt;Provision a reserved connection&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -X POST -d &amp;quot;PROVISION&amp;quot; http://localhost:9080/connections/TE-03b16eea46/status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will return an ACK, and start working on provisioning the link.
The link will be up and ready to use when the &lt;code&gt;provision_state&lt;/code&gt; is &lt;code&gt;Provisioned&lt;/code&gt; and &lt;code&gt;data_plane_active&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;terminating-a-connection&#34;&gt;Terminating a connection&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -X POST -d &amp;quot;TERMINATE&amp;quot; http://localhost:9080/connections/TE-03b16eea46/status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The connection will then go into &lt;code&gt;lifecycle_state&lt;/code&gt; &lt;code&gt;Terminating&lt;/code&gt;, and when everything is released it will end up in &lt;code&gt;lifecycle_state&lt;/code&gt; &lt;code&gt;Terminated&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;other-supported-status-operations&#34;&gt;Other supported status operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; confirms the reserve commit (used if you set &lt;code&gt;auto_commit&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ABORT&lt;/code&gt; aborts the reservation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RELEASE&lt;/code&gt; used to release a provisioned connection, and return to it just being reserved.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROVISION&lt;/code&gt; described above&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TERMINATE&lt;/code&gt; described above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-features&#34;&gt;Other features&lt;/h2&gt;
&lt;p&gt;No:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nsa identity (b0rked concept anyway)&lt;/li&gt;
&lt;li&gt;global reservation id&lt;/li&gt;
&lt;li&gt;Possibility to designate connection id&lt;/li&gt;
&lt;li&gt;Time zones in datetime, always utc (end with Z)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;todo&#34;&gt;Todo&lt;/h3&gt;
&lt;p&gt;Maybe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client correlation id&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Backends</title>
      <link>https://NORDUnet.github.io/opennsa/docs/developer/backends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/developer/backends/</guid>
      <description>
        
        
        &lt;p&gt;Further document the various backends available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Quick Developer Guide</title>
      <link>https://NORDUnet.github.io/opennsa/docs/developer/developer_guide/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/developer/developer_guide/</guid>
      <description>
        
        
        &lt;h1 id=&#34;quick-developer-guide&#34;&gt;Quick Developer Guide&lt;/h1&gt;
&lt;h2 id=&#34;server-setup&#34;&gt;Server Setup&lt;/h2&gt;
&lt;p&gt;For this guide we are assuming you are using the configuration templates and examples provided by default.  Any commands
will likely need to be updated accordingly for your own topology and configuration.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll assume that you are either running the server locally.  Both of those cases will require a running postgres database.  For simplicity sake I&amp;rsquo;m going to assume you have a docker-compose stack running.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./generate-docker-config  ## will create a .env file and config/opennsa.conf
docker-compose up -d 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;usage-guide&#34;&gt;Usage Guide&lt;/h2&gt;
&lt;p&gt;All operations in this case will be triggered via the client titled onsa which can be found in the root of the project.&lt;/p&gt;
&lt;p&gt;There are a few &amp;lsquo;base&amp;rsquo; operation that are supported by the Network Service Interface (NSI) Spec which you can find &lt;a href=&#34;GFD.237.pdf&#34;&gt;here&lt;/a&gt;.  Others that are not listed in the document serve as a convenience method.&lt;/p&gt;
&lt;p&gt;All operation are usually a sequence of: reserve, reserveCommit, provision, release, terminate.
query related requests are for diagnostic purposes.&lt;/p&gt;
&lt;h3 id=&#34;endpoints&#34;&gt;Endpoints&lt;/h3&gt;
&lt;p&gt;The following endpoints will then be accessible if everything works as advertised.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://localhost:9080/NSI/dockertest.net:2021:topology.nml.xml&lt;/li&gt;
&lt;li&gt;http://localhost:9080/NSI/discovery.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-0-nsi-domain-knowledge&#34;&gt;Step 0 NSI Domain knowledge&lt;/h3&gt;
&lt;h4 id=&#34;assumptions&#34;&gt;Assumptions:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TLS is not enabled.&lt;/li&gt;
&lt;li&gt;running locally and exposed 9080 locally.&lt;/li&gt;
&lt;li&gt;hostname is set to dockertest.net:2021 or similar value in the format of:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{domain_name}:year
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In our example and sample file we use &lt;code&gt;dockertest.net:2021&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;urn&#34;&gt;URN&lt;/h4&gt;
&lt;p&gt;All resources are mapped using a URN pattern.&lt;/p&gt;
&lt;p&gt;http://localhost:9080/NSI/dockertest.net:2021:topology.nml.xml will show you your current topology.&lt;/p&gt;
&lt;p&gt;Resources are reference by URN which are in the following format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;prefix&amp;gt;:&amp;lt;organization&amp;gt;:&amp;lt;type&amp;gt;&lt;/code&gt;  example value is: &lt;code&gt;urn:ogf:network:dockertest.net:2021:topology:ps#vlan=1780&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prefix:  should be &lt;code&gt;urn:ogf:network&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;organization: &amp;lt;domain_name&amp;gt;:year&lt;/li&gt;
&lt;li&gt;type: in our example would &lt;code&gt;topology&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;resource: &lt;name&gt;#&amp;lt;label={vlan or mpls}&amp;gt;=&amp;lt;ID aka 1780&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More info can be found in the &lt;a href=&#34;config.md&#34;&gt;config&lt;/a&gt; documentation.&lt;/p&gt;
&lt;h4 id=&#34;selecting-source--destination&#34;&gt;Selecting Source / Destination&lt;/h4&gt;
&lt;h2 id=&#34;reservation-step-1&#34;&gt;Reservation: Step 1&lt;/h2&gt;
&lt;p&gt;NOTES: Currently the -s and -d strip away the prefix.  Please be aware when using the CLI client.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;onsa reserve &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -u http://localhost:9080/NSI/services/CS2 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;##service from Docker &lt;/span&gt;
    -g urn:uuid:d7a6a2ff-2cb5-4892-8bec-2a50140a6342 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;##Global ID&lt;/span&gt;
    -s &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:topology:ps#vlan=1780&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Source&lt;/span&gt;
    -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:topology:port1#vlan=1787&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Destination&lt;/span&gt;
    -b &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# bandwidth in Megabits&lt;/span&gt;
    -a 2022-09-24T20:00:00 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#start date/time (has to be in the future)&lt;/span&gt;
    -e 2022-09-24T21:00:00 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## end date/time (again in the future)&lt;/span&gt;
    -p dockertest.net:2021:nsa &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## provider&lt;/span&gt;
    -r dockertest.net:2021:sense &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;##requested &lt;/span&gt;
    -h 192.168.1.64 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## OpenNSA Server host (localhost won&amp;#39;t work if using docker)&lt;/span&gt;
    -o &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8543&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#Port &lt;/span&gt;
    -v &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## verbose&lt;/span&gt;
    -q &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;##dump payload message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;query-validation&#34;&gt;Query Validation&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re going to query the data for the reservation we just created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt; ./onsa query &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
 -u http://localhost:9080/NSI/services/CS2  &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
 -p &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:nsa&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt; -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:sense&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt; -h 192.168.1.64 -o &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8543&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt; -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Connection   DO-8108e03315 (urn:ogf:network:dockertest.net:2021:nsa)
Global ID    urn:uuid:d7a6a2ff-2cb5-4892-8bec-2a50140a6342
Description  Test Connection
States       ReserveStart, Released, Created
Dataplane    Active : False, Version: 0, Consistent False
Start-End    2022-09-24 20:00:00 - 2022-09-24 21:00:00
Path         dockertest.net:2021:topology:ps?vlan=1780 -- dockertest.net:2021:topology:port1?vlan=1787
Bandwidth    100
Direction    Bidirectionall
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;provision-step-2&#34;&gt;Provision Step 2&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need the Connection ID from the query above for this step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./onsa provision &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
    -c  DO-8108e03315 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;## Connection &lt;/span&gt;
    -u http://localhost:9080/NSI/services/CS2 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -p &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:nsa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:sense&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -h 192.168.1.64 -o &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8543&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -v -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same Query as above should now show a new state of:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;States       **ReserveHeld**, Provisioning, Created
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;clean-up-operations&#34;&gt;Clean up Operations&lt;/h1&gt;
&lt;h2 id=&#34;release-step-3&#34;&gt;Release Step 3&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./onsa release &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
    -c  DO-8108e03315 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt; 
    -u http://localhost:9080/NSI/services/CS2 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -p &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:nsa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:sense&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -h 192.168.1.64 -o &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8543&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -v -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;terminate-step-4&#34;&gt;Terminate Step 4&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./onsa terminate &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
    -c  DO-8108e03315 &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
    -u http://localhost:9080/NSI/services/CS2 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -p &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:nsa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\ &lt;/span&gt;
    -r &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dockertest.net:2021:sense&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -h localhost -o &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8543&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -v -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Testing</title>
      <link>https://NORDUnet.github.io/opennsa/docs/developer/test/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://NORDUnet.github.io/opennsa/docs/developer/test/</guid>
      <description>
        
        
        &lt;p&gt;How to run the the unit/integration tests for OpenNSA&lt;/p&gt;
&lt;p&gt;Make sure all the requirements are installed. Then:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./util/pg-test-run      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# This will start a Postgres in docker&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;PYTHONPATH&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;. trial &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the CI/CD pipeline locally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the CLI tooling according to: &lt;a href=&#34;https://docs.drone.io/quickstart/cli/&#34;&gt;https://docs.drone.io/quickstart/cli/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the pipeline by using &lt;code&gt;drone exec&lt;/code&gt;.  Please ensure you have docker installed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
